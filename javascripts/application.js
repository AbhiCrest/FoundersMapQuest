// Generated by CoffeeScript 2.3.1
(function() {
  $(document).ready(function() {
    var displayObject;
    displayObject = new DisplayData();
    return displayObject.init();
  });

  window.Displaydata = window.DisplayData = class DisplayData {
    constructor() {
      this.main = new Main();
      this.paginationObj = new Pagination();
      this.addEntry = new addEntry();
      this.tableWrapper = $(".entries_tableWrapper");
      this.previousPage = $(".Page_previousBtn");
      this.nextPage = $(".Page_nextBtn");
      this.formSubmit = $(".entryForm_submit");
      this.data = [];
      this.entriesCount = '';
      this.currentPage = '';
      this.recordsPerPage = 5;
    }

    init() {
      this.data = this.main.fetchData();
      this.totalEntries = this.data.length;
      this.changePage(1);
      this.formSubmit.on('click', () => {
        return this.addEntry.newEntry();
      });
      $(".Page_nextBtn").on('click', () => {
        var that;
        // debugger
        that = this;
        this.currentPage = $(".Page_pageNumber").text();
        //@nextPage()
        return this.pageNext();
      });
      return $(".Page_previousBtn").on('click', (e) => {
        this.currentPage = $(".Page_pageNumber").text();
        return this.pagePrevious();
      });
    }

    pagePrevious() {
      if (this.currentPage > 1) {
        this.currentPage--;
        this.changePage(this.currentPage);
        return this.paginationObj.updatePageNo(this.currentPage);
      }
    }

    pageNext() {
      if (this.currentPage < this.numOfPages()) {
        this.currentPage++;
        this.changePage(this.currentPage);
        return this.paginationObj.updatePageNo(this.currentPage);
      }
    }

    numOfPages() {
      return this.totalEntries / this.recordsPerPage;
    }

    createTable(allRows) {
      var body, cell, element, i, index, j, len, len1, row, rowCells, rowCount, rowIndex, rows, table;
      this.entriesCount = allRows.length;
      table = $('.entries_table');
      body = $("<tbody/>");
      rowCount = 0;
//add rows to table
      for (index = i = 0, len = allRows.length; i < len; index = ++i) {
        rows = allRows[index];
        row = $("<tr/>");
        if (rowCount < 5) {
          rowCells = allRows[index];
          for (rowIndex = j = 0, len1 = rowCells.length; j < len1; rowIndex = ++j) {
            element = rowCells[rowIndex];
            if (rowIndex !== 7) { //to avoid making column "Photo"
              element = element.replace(/"/g, "");
              cell = $("<td>" + element + "</td>");
              row.append(cell);
              body.append(row);
            }
          }
          rowCount++;
        }
      }
      table.append(body);
      body.addClass("entries_table_body");
      return table;
    }

    changePage(page) {
      var recoredIndex, startIndex, tabledata;
      this.listingTable = $(".entries_table_body");
      tabledata = [];
      //validate Page
      if (page <= 1) {
        page = 1;
      }
      if (page > this.numOfPages()) {
        page = this.numOfPages();
      }
      this.listingTable.empty();
      recoredIndex = (page - 1) * this.recordsPerPage + 1;
      startIndex = recoredIndex;
      while (recoredIndex <= page * this.recordsPerPage && recoredIndex <= this.totalEntries) {
        tabledata.push(this.data[recoredIndex - 1]);
        recoredIndex++;
      }
      this.createTable(tabledata);
      this.paginationObj.updateMessage(startIndex, recoredIndex - 1, this.totalEntries);
      if (page === 1) {
        $(".Page_previousBtn").hide();
      } else {
        $(".Page_previousBtn").show();
      }
      if (page === this.numOfPages()) {
        return $(".Page_nextBtn").hide();
      } else {
        return $(".Page_nextBtn").show();
      }
    }

  };

}).call(this);
